from Bio import SeqIO
import pandas as pd
import argparse
import numpy as np
#RUNS on python v3.9.0

print(">>> STARTING phage_finder_info-generator-BVBRC_annot.py")

# Define the argument parser
parser = argparse.ArgumentParser(description="Create phage_finder_info.txt for Phage_Finder from a BVBRC's Bacterial Annotation.",usage ='python phage_finder_info.py </path/to/annotation.embl> </path/to/annotation.txt> </path/to/output>', prog = "phage_finder_info.txt", epilog = "Dependencies: python=v3.9.0, Bioconda, argparse, pandas, numpy ")


# Add arguments for the EMBL and TXT files
parser.add_argument("annotation_embl_file", help="Path to 'annotation.embl' generated by BVBRC's Bacterial Annotation pipeline.")
parser.add_argument("annotation_txt_file", help="Path to 'annotation.txt' generated by BVBRC's Bacterial Annotation pipeline.")
parser.add_argument('output_location', default='.', help="Path to store phage_finder_info.txt.")


args = parser.parse_args()

# Creates dataframe containing the contig_name and it's size from embl file
def contig_length(annotation_embl_file):
    name = []
    length = []
    # Open embl file that contains the lenght of the contigs
    with open(annotation_embl_file, "r") as file:
        for record in SeqIO.parse(file, "embl"):
            # Extract the ID and length of each contig
            name.append(record.name)
            length.append(len(record.seq))

    # Creates dataframe containing the contig_name and it's size
    contig_df = pd.DataFrame(list(zip(name, length)), columns =['contig_name', 'length'])
    return contig_df

# Write phage_finder_info.txt as a tab delimited txt from txt and embl
def generate_phagefinderinfo (annotation_embl_file, annotation_txt_file, output_loc):
    contig_df = contig_length(annotation_embl_file)
    # Open txt with annotation information in tab delimited format
    annot_df = pd.read_csv(annotation_txt_file, delimiter = "\t")
    # Change the na to string 'NaN' as the na produces an empty string in 'feat_name" even when the 'feature_id' is NOT EMPTY. 
    annot_df['plfam'] = annot_df['plfam'].fillna("NaN")
    annot_df['pgfam'] = annot_df['pgfam'].fillna("NaN")
    # Make the feature name by combining all possible references to the mapping. 
    annot_df["feat_name"] = annot_df["feature_id"] + "_" + annot_df["plfam"] + "_" + annot_df["pgfam"] 

    # In annot_df the START is filled with 3' or 5' possisions as + and - strands start coding in opposite directions. 
    # Phage_Finder require the phage_finder_info.txt to have a 3end and 5'end column. So we need to compare the START and STOP for each row
    # to determin which one os 3' and 5'. 
    # + strands (aka forward strands) are 5->3
    # - strands (aka reverse strands) are 3->5
    # If the START strand is < than the STOP strand, then the strand is -, and the START = 5 & Stop = 3
    # If the START strand is > than the STOP strand, then the strand is +, and the START = 3 & Stop = 5
    annot_df['end5'] = np.where(annot_df['stop'] - annot_df['start'] > 0, annot_df['start'], annot_df['stop'])
    annot_df['end3'] = np.where(annot_df['stop'] - annot_df['start'] < 0, annot_df['start'], annot_df['stop'])

    # Create new dataframe that will hold phage_finder_info.txt 
    phage_finder_info = pd.DataFrame(annot_df[["contig_id","feat_name","function","end5", "end3"]])

    # Map the contigs to the earlier created dataframe contig_df. This is done to create a column containing the contig's lenght. 
    phage_finder_info = (phage_finder_info.merge(contig_df, left_on='contig_id', right_on='contig_name'))

    # The columns are rearanged and renamed to match phage_finder_info.txt requirements
    phage_finder_info = phage_finder_info[['contig_name','length','feat_name', 'end5', 'end3', 'function' ]]
    phage_finder_info.rename(columns={"contig_name": "scaffold/contig/assembly_ID", "length": "size_of_molecule","function": "com_name"})

    # Write phage_finder_info.txt as a tab delimited txt 
    if output_loc[-1] != "/":
        output_loc = output_loc+"/"
    output_loc = f"{output_loc}phage_finder_info.txt"
    phage_finder_info.to_csv(output_loc, sep="\t", index=None)
    return output_loc

output_loc = generate_phagefinderinfo(args.annotation_embl_file, args.annotation_txt_file, args.output_location)
print(f">>> FINISHED, file stored here: {output_loc}")

